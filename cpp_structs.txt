
struct MKT_IDX_RPT_DATA {
    MESSAGE_HEADER MESSAGE_HEADER;
    char MessageType;
    char IndexName[15];
    MKT_INDEX MKT_INDEX;
};



struct ST_SEC_ELIGIBILITY_PER_MKT {
    uint8_t Reserved : 7;
    uint8_t Eligibility : 1;
    int16_t Status;
};



struct ST_MBO_INFO {
    int32_t TraderId;
    int32_t Qty;
    int32_t Price;
    ST_MBO_MBP_TERMS ST_MBO_MBP_TERMS;
    int32_t MinFillQty;
};



struct ST_INACTIVE_MBO_DATA {
    int32_t Token;
    int16_t BookType;
    int16_t TradingStatus;
    uint32_t VolumeTradedToday;
    int32_t LastTradedPrice;
    char NetChangeIndicator;
    int32_t NetPriceChangeFromClosingPrice;
    int32_t LastTradeQuantity;
    int32_t LastTradeTime;
    int32_t AverageTradePrice;
    int16_t AuctionNumber;
    int16_t AuctionStatus;
    int16_t InitiatorType;
    int32_t InitiatorPrice;
    int32_t InitiatorQuantity;
    int32_t AuctionPrice;
    int32_t AuctionQuantity;
    char RecordBuffer[55];
};



struct MS_SECURITY_UPDATE_INFO {
    BCAST_HEADER BCAST_HEADER;
    int32_t Token;
    SEC_INFO SEC_INFO;
    int16_t PermittedToTrade;
    double IssuedCapital;
    int32_t WarningQuantity;
    int32_t FreezeQuantity;
    char CreditRating[12];
    ST_SEC_ELIGIBILITY_PER_MARKET ST_SEC_ELIGIBILITY_PER_MARKET[4];
    int16_t IssueRate;
    int32_t IssueStartDate;
    int32_t InterestPaymentDate;
    int32_t IssueMaturityDate;
    int32_t MarginPercentage;
    int32_t MinimumLotQuantity;
    int32_t BoardLotQuantity;
    int32_t TickSize;
    char Name[25];
    char Reserved[1];
    int32_t ListingDate;
    int32_t ExpulsionDate;
    int32_t ReAdmissionDate;
    int32_t RecordDate;
    int32_t LowPriceRange;
    int32_t HighPriceRange;
    int32_t ExpiryDate;
    int32_t NoDeliveryStartDate;
    int32_t NoDeliveryEndDate;
    ST_ELIGIBILITY_INDICATORS ST_ELIGIBILITY_INDICATORS;
    int32_t BookClosureStartDate;
    int32_t BookClosureEndDate;
    int32_t ExerciseStartDate;
    int32_t ExerciseEndDate;
    int32_t OldToken;
    char AssetInstrument[6];
    char AssetName[10];
    int32_t AssetToken;
    int32_t IntrinsicValue;
    int32_t ExtrinsicValue;
    ST_PURPOSE ST_PURPOSE;
    int32_t LocalUpdateDateTime;
    char DeleteFlag[1];
    char Remark[25];
    int32_t BasePrice;
};



struct MKT_STATS_DATA {
    CONTRACT_DESC CONTRACT_DESC;
    int16_t MarketType;
    int32_t OpenPrice;
    int32_t HighPrice;
    int32_t LowPrice;
    int32_t ClosingPrice;
    uint32_t TotalQuantityTraded;
    double TotalValueTraded;
    int32_t PreviousClosePrice;
    uint32_t OpenInterest;
    int32_t ChgOpenInterest;
    char Indicator[4];
};



struct ENHNCD_OPEN_INTEREST {
    int32_t TokenNo;
    int64_t CurrentOi;
};



struct MS_BOX_SIGN_ON_REQUEST_IN {
    MESSAGE_HEADER MESSAGE_HEADER;
    int16_t BoxId;
    char BrokerId[5];
    char Reserved[5];
    char SessionKey[8];
};



struct INDUSTRY_INDICES {
    char IndustryName[15];
    int32_t IndexValue;
};



struct ST_MBP_INFO {
    int32_t Qty;
    int32_t Price;
    int16_t NoOfOrders;
};



struct ST_ELIGIBILITY_INDICATORS {
    uint8_t Reserved : 5;
    uint8_t MinimumFill : 1;
    uint8_t AON : 1;
    uint8_t ParticipateInMarketIndex : 1;
    char Reserved;
};



struct MS_GR_REQUEST {
    MESSAGE_HEADER MESSAGE_HEADER;
    int16_t BoxID;
    char BrokerID[5];
    char Filler[1];
};



struct ST_PURPOSE {
    struct {
        uint8_t ExerciseStyle : 1;
        uint8_t Reserved1 : 1;
        uint8_t EGM : 1;
        uint8_t AGM : 1;
        uint8_t Interest : 1;
        uint8_t Bonus : 1;
        uint8_t Rights : 1;
        uint8_t Dividend : 1;
    } byte0;
    
    struct {
        uint8_t Reserved2 : 3;
        uint8_t IsCorporateAdjusted : 1;
        uint8_t IsThisAsset : 1;
        uint8_t PIAllowed : 1;
        uint8_t ExRejectionAllowed : 1;
        uint8_t ExAllowed : 1;
    } byte1;
};



struct ST_INDICATOR {
    struct {
        uint8_t Reserved : 4;
        uint8_t Sell : 1;
        uint8_t Buy : 1;
        uint8_t LastTradeLess : 1;
        uint8_t LastTradeMore : 1;
    };
    char Reserved;
};



struct ST_ENHNCD_MARKET_WATCH_BCAST {
    int32_t Token;
    ST_MKT_WISE_INFO ST_MKT_WISE_INFO[3];
    int64_t OpenInterest;
};



struct MS_BCAST_INDUSTRY_INDICES {
    BCAST_HEADER BCAST_HEADER;
    int16_t NoOfRecs;
    INDUSTRY_INDICES INDUSTRY_INDICES[20];
};



struct OPEN_INTEREST {
    // Structure definition needed for OPEN_INTEREST array element
};

struct CM_ASSET_OI {
    char Reserved1[2];
    char Reserved2[2];
    int32_t LogTime;
    char MarketType[2];
    int16_t TransactionCode;
    int16_t NoOfRecords;
    char Reserved3[8];
    int64_t TimeStamp;
    char Reserved4[8];
    int16_t MessageLength;
    OPEN_INTEREST OpenInterest[58];
};



struct MS_BCAST_MBO_MBP {
    BCAST_HEADER BCAST_HEADER;
    ST_INTERACTIVE_MBO_DATA ST_INTERACTIVE_MBO_DATA;
    char RecordBuffer[100];
    double TotalBuyQuantity;
    double TotalSellQuantity;
    ST_INDICATOR ST_INDICATOR;
    int32_t ClosingPrice;
    int32_t OpenPrice;
    int32_t HighPrice;
    int32_t LowPrice;
};



struct TOKEN_AND_ELIGIBILITY {
    int32_t Token;
    ST_SEC_STATUS_PER_MARKET ST_SEC_STATUS_PER_MARKET[4];
};



struct MS_SYSTEM_INFO_DATA {
    MESSAGE_HEADER MESSAGE_HEADER;
    ST_MARKET_STATUS ST_MARKET_STATUS;
    ST_EX_MARKET_STATUS ST_EX_MARKET_STATUS;
    ST_PL_MARKET_STATUS ST_PL_MARKET_STATUS;
    char UpdatePortfolio;
    int32_t MarketIndex;
    int16_t DefaultSettlementPeriod_Normal;
    int16_t DefaultSettlementPeriod_Spot;
    int16_t DefaultSettlementPeriod_Auction;
    int16_t CompetitorPeriod;
    int16_t SolicitorPeriod;
    int16_t WarningPercent;
    int16_t VolumeFreezePercent;
    int16_t SnapQuoteTime;
    char Reserved[2];
    int32_t BoardLotQuantity;
    int32_t TickSize;
    int16_t MaximumGtcDays;
    ST_STOCK_ELIGIBLE_INDICATORS ST_STOCK_ELIGIBLE_INDICATORS;
    int16_t DisclosedQuantityPercentAllowed;
    int32_t RiskFreeInterestRate;
};



struct MS_ENHNCD_BCAST_INQ_RESP_2 {
    BCAST_HEADER BCAST_HEADER;
    int16_t NoOfRecords;
    ST_ENHNCD_MARKET_WATCH_BCAST ST_ENHNCD_MARKET_WATCH_BCAST[5];
};



struct MS_BOX_SIGN_ON_REQUEST_OUT {
    MESSAGE_HEADER MESSAGE_HEADER;
    int16_t BoxId;
    char Reserved[10];
};



struct MS_SYSTEM_INFO_REQ {
    MESSAGE_HEADER MESSAGE_HEADER;
    int32_t LastUpdatePortfolioTime;
};



struct MS_SECURITY_STATUS_UPDATE_INFO {
    BCAST_HEADER BCAST_HEADER;
    int16_t NumberOfRecords;
    TOKEN_AND_ELIGIBILITY TOKEN_AND_ELIGIBILITY[35];
};



struct ST_TICKER_INDEX_INFO {
    int32_t Token;
    int16_t MarketType;
    int32_t FillPrice;
    int32_t FillVolume;
    uint32_t OpenInterest;
    uint32_t DayHiOI;
    uint32_t DayLoOI;
};



struct OPEN_INTEREST {
    int32_t TokenNo;
    uint32_t CurrentOi;
};



struct ENHNCD_CM_ASSET_OI {
    char Reserved[2];
    char Reserved[2];
    int32_t LogTime;
    char MarketType[2];
    int16_t TransactionCode;
    int16_t NoOfRecords;
    char Reserved[8];
    int64_t TimeStamp;
    char Reserved[8];
    int16_t MessageLength;
    OPEN_INTEREST OPEN_INTEREST[39];
};



struct MS_INSTRUMENT_UPDATE_INFO {
    BCAST_HEADER BCAST_HEADER;
    int16_t InstrumentId;
    char InstrumentName[6];
    char InstrumentDescription[25];
    int32_t InstrumentUpdateTime;
    char DeleteFlag;
};



struct MS_BCAST_VCT_MSGS {
    BCAST_HEADER BCAST_HEADER;
    int32_t Token;
    SEC_INFO SEC_INFO;
    int16_t MarketType;
    ST_BCAST_DESTINATION ST_BCAST_DESTINATION;
    int16_t BroadcastMessageLength;
    char BroadcastMessage[239];
};



struct SPD_STATS_DATA {
    int16_t MARKETTYPE;
    char INSTRUMENTNAME1[6];
    char SYMBOL1[10];
    int32_t EXPIRYDATE1;
    int32_t STRIKEPRICE1;
    char OPTIONTYPE1[2];
    int16_t CALEVEL1;
    char INSTRUMENTNAME2[6];
    char SYMBOL2[10];
    int32_t EXPIRYDATE2;
    int32_t STRIKEPRICE2;
    char OPTIONTYPE2[2];
    int16_t CALEVEL2;
    int32_t OPENPD;
    int32_t HIPD;
    int32_t LOWPD;
    int32_t LASTTRADEDPD;
    int32_t NOOFCONTRACTSTRADED;
};



struct MS_RP_TRAILER {
    MESSAGE_HEADER MESSAGE_HEADER;
    char MessageType;
    int32_t NumberOfPackets;
    char Reserved;
};



struct MS_TICKER_TRADE_DATA {
    BCAST_HEADER BCAST_HEADER;
    int16_t Number_of_Records;
    ST_TICKER_INDEX_INFO ST_TICKER_INDEX_INFO[17];
};



struct PARTICIPANT_UPDATE_INFO {
    BCAST_HEADER BCAST_HEADER;
    char ParticipantId[12];
    char ParticipantName[25];
    char ParticipantStatus;
    int32_t ParticipantUpdateDateTime;
    char DeleteFlag;
};



struct COL_USER_STATUS_CHANGE_REQ {
    MESSAGE_HEADER MESSAGE_HEADER;
    int32_t Userid;
    char ColUserBit;
    char Reserved[7];
};



struct MS_DOWNLOAD_INDEX {
    MESSAGE_HEADER MESSAGE_HEADER;
    int16_t NoOfRecords;
    char INDEX_DETAILS[408];
};



struct INDEX_DETAILS {
    char IndexName[15];
    int32_t Token;
    int32_t LastUpdateDateTime;
};



struct RESET_USER_PASSWORD_IN_FO {
    MESSAGE_HEADER MESSAGE_HEADER;
    int32_t Userid;
    char Reserved[14];
};



struct LIMIT_PRICE_PROTECTION_RANGE_DETAILS {
    int32_t TokenNumber;
    int32_t HighExecBand;
    int32_t LowExecBand;
};



struct MS_BCAST_LIMIT_PRICE_PROTECTION_RANGE {
    BCAST_HEADER BCAST_HEADER;
    LIMIT_PRICE_PROTECTION_RANGE_DATA LIMIT_PRICE_PROTECTION_RANGE_DATA;
};



struct ST_SEC_ELIGIBILITY_PER_MAKRET {
    int16_t Security_Status;
    char Reserved;
    char Eligibility;
    char Reserved[2];
};



struct ADDITIONAL_ORDER_FLAGS {
    uint8_t BOC : 1;
    uint8_t COL : 1;
    uint8_t Reserved : 1;
};



struct UPDATE_LDB_HEADER {
    MESSAGE_HEADER MESSAGE_HEADER;
    char Reserved[2];
};



struct MS_UPDATE_LOCAL_DATABASE {
    MESSAGE_HEADER MESSAGE_HEADER;
    int32_t LastUpdateSecurityTime;
    int32_t LastUpdateParticipantTime;
    int32_t LastUpdateInstrumentTime;
    int32_t LastUpdateIndexTime;
    char RequestForOpenOrders;
    char Reserved;
    ST_MARKET_STATUS ST_MARKET_STATUS;
    ST_EX_MARKET_STATUS ST_EX_MARKET_STATUS;
    ST_PL_MARKET_STATUS ST_PL_MARKET_STATUS;
};



struct ST_ORDER_FLAGS {
    uint8_t AON : 1;
    uint8_t IOC : 1;
    uint8_t GTC : 1;
    uint8_t Day : 1;
    uint8_t MIT : 1;
    uint8_t SL : 1;
    uint8_t Market : 1;
    uint8_t ATO : 1;
    uint8_t Reserved : 3;
    uint8_t Frozen : 1;
    uint8_t Modified : 1;
    uint8_t Traded : 1;
    uint8_t MatchedInd : 1;
    uint8_t MF : 1;
};



struct PARTICIPANT_FILE_HEADER {
    char NSEFO[6];
    char Reserved;
    char VersionNumber[5];
    char Reserved[2];
};



struct LIMIT_PRICE_PROTECTION_RANGE_DATA {
    int32_t MsgCount;
    char LIMIT_PRICE_PROTECTION_RANGE_DATA[300];
};



struct NORMAL_ORD_LIMIT_UPDATE_REQ {
    MESSAGE_HEADER MESSAGE_HEADER;
    char BrokerId[5];
    char Reserved[1];
    int32_t UserId;
    double OrderQtyLimit;
    double OrderValLimit;
};



struct MS_SECURE_BOX_REGISTRATION_RESPONSE_OUT {
    MESSAGE_HEADER MESSAGE_HEADER;
};



struct MS_ENHNC_TICKER_TRADE_DATA {
    BCAST_HEADER BCAST_HEADER;
    int16_t Number_of_Records;
    ST_ENHNC_TICKER_INDEX_INFO ST_ENHNC_TICKER_INDEX_INFO[12];
};



struct BRANCH_LIMITS {
    double BranchBuyValueLimit;
    double BranchSellValueLimit;
    char Reserved[16];
};



struct GIVEUP_RESPONSE {
    MESSAGE_HEADER MESSAGE_HEADER;
    int16_t ReasonCode;
    GIVEUP GIVEUP;
};



struct ST_MARKET_STATUS {
    int16_t Normal;
    int16_t Oddlot;
    int16_t Spot;
    int16_t Auction;
};



struct MS_ORDER_VAL_LIMIT_DATA {
    MESSAGE_HEADER MESSAGE_HEADER;
    char BrokerId[5];
    int16_t BranchId;
    char UserName[25];
    int32_t UserId;
    int16_t UserType;
    INSTRUMENT_USER INSTRUMENT_USER[2];
};



struct INSTRUMENT_USER {
    double BranchBuyValueLimit;
    double BranchSellValueLimit;
    double BranchUsedBuyValueLimit;
    double BranchUsedSellValueLimit;
    double UserOrderBuyValueLimit;
    double UserOrderSellValueLimit;
    double UserOrderUsedBuyValueLimit;
    double UserOrderUsedSellValueLimit;
};



struct ST_EX_MARKET_STATUS {
    int16_t Normal;
    int16_t Oddlot;
    int16_t Spot;
    int16_t Auction;
};



struct BRANCH_ORD_VAL_LIMIT_UPDATE_REQ {
    MESSAGE_HEADER MESSAGE_HEADER;
    char BrokerId[5];
    char Reserved[25];
    int16_t BranchId;
    BRANCH_LIMITS BRANCH_LIMITS[2];
};



struct MS_TRADE_CONFIRM_TR {
    int16_t TransactionCode;
    int32_t LogTime;
    int32_t TraderId;
    int64_t Timestamp;
    double Timestamp1;
    double Timestamp2;
    double ResponseOrderNumber;
    char BrokerId[5];
    char Reserved[1];
    char AccountNumber[10];
    int16_t BuySellIndicator;
    int32_t OriginalVolume;
    int32_t DisclosedVolume;
    int32_t RemainingVolume;
    int32_t DisclosedVolumeRemaining;
    int32_t Price;
    ST_ORDER_FLAGS ST_ORDER_FLAGS;
    int32_t GoodTillDate;
    int32_t FillNumber;
    int32_t FillQuantity;
    int32_t FillPrice;
    int32_t VolumeFilledToday;
    char ActivityType[2];
    int32_t ActivityTime;
    int32_t Token;
    CONTRACT_DESC_TR CONTRACT_DESC_TR;
    char OpenClose[1];
    char BookType[1];
    char Participant[12];
    ADDITIONAL_ORDER_FLAGS ADDITIONAL_ORDER_FLAGS;
    char PAN[10];
    int32_t AlgoID;
    int16_t Reserved2;
    int64_t LastActivityReference;
    char Reserved3[52];
};



struct GIVEUP {
    double OrderNumber;
    int32_t FillNumber;
    char InstrumentName[6];
    char Symbol[10];
    int32_t ExpiryDate;
    int32_t StrikePrice;
    char OptionType[2];
    int16_t CALevel;
    int32_t FillVolume;
    int32_t FillPrice;
    char BrokerId[5];
    char Filler[1];
    int16_t BuySell;
    int16_t BookType;
    int32_t LastModifiedDateTime;
    char InitiatedByControl[1];
    char OpenClose[1];
    char ReservedFiller[1];
    char Participant[12];
    char GiveupFlag[1];
    char Deleted[1];
};



struct USER_ORD_VAL_LIMIT_UPDATE_REQ {
    MESSAGE_HEADER MESSAGE_HEADER;
    char BrokerId[5];
    char Reserved;
    int16_t BranchId;
    char Reserved[26];
    int32_t UserId;
    char Reserved[2];
    USER_LIMITS USER_LIMITS[2];
};



struct ST_STOCK_ELIGIBLE_INDICATORS {
    uint8_t Reserved : 5;
    uint8_t BooksMerged : 1;
    uint8_t MinimumFill : 1;
    uint8_t AON : 1;
    uint8_t Reserved : 8;
};



struct MS_GR_RESPONSE {
    MESSAGE_HEADER MESSAGE_HEADER;
    int16_t BoxID;
    char BrokerID[5];
    char Filler[1];
    char IPAddress[16];
    int32_t Port;
    char SessionKey[8];
    char CryptographicKey[32];
    char CryptographicIV[16];
};



struct ST_PL_MARKET_STATUS {
    int16_t Normal;
    int16_t Oddlot;
    int16_t Spot;
    int16_t Auction;
};



struct USER_LIMITS {
    char Reserved[32];
    double UserOrderBuyValueLimit;
    double UserOrderSellValueLimit;
    char Reserved[16];
};



struct HEARTBEAT {
    MESSAGE_HEADER MESSAGE_HEADER;
};



struct USER_ADDR_UNLOCK_CONFIRM_FO {
    MESSAGE_HEADER MESSAGE_HEADER;
    int32_t Userid;
    char Reserved[36];
};



struct MS_OM_REQUEST_TR {
    int16_t TransactionCode;
    int32_t UserID;
    char ModifiedCancelledBy;
    int32_t TokenNo;
    CONTRACT_DESC_TR CONTRACT_DESC_TR;
    double OrderNumber;
    char AccountNumber[10];
    int16_t BookType;
    int16_t BuySellIndicator;
    int32_t DisclosedVolume;
    int32_t DisclosedVolumeRemaining;
    int32_t TotalVolumeRemaining;
    int32_t Volume;
    int32_t VolumeFilledToday;
    int32_t Price;
    int32_t GoodTillDate;
    int32_t EntryDateTime;
    int32_t LastModified;
    ST_ORDER_FLAGS ST_ORDER_FLAGS;
    int16_t BranchId;
    int32_t TraderId;
    char BrokerId[5];
    char OpenClose;
    char Settlor[12];
    int16_t ProClientIndicator;
    ADDITIONAL_ORDER_FLAGS ADDITIONAL_ORDER_FLAGS;
    int32_t Filler;
    double NnField;
    char PAN[10];
    int32_t AlgoID;
    int16_t Reserved;
    int64_t LastActivityReference;
    char Reserved2[24];
};



struct PORTFOLIO_DATA {
    char Portfolio[10];
    int32_t Token;
    int32_t LastUpdateDtTime;
    char DeleteFlag;
};



struct MS_TRADE_CONFIRM {
    MESSAGE_HEADER MESSAGE_HEADER;
    double ResponseOrderNumber;
    char BrokerId[5];
    char Reserved;
    int32_t TraderNumber;
    char AccountNumber[10];
    int16_t BuySellIndicator;
    int32_t OriginalVolume;
    int32_t DisclosedVolume;
    int32_t RemainingVolume;
    int32_t DisclosedVolumeRemaining;
    int32_t Price;
    ST_ORDER_FLAGS ST_ORDER_FLAGS;
    int32_t GoodTillDate;
    int32_t FillNumber;
    int32_t FillQuantity;
    int32_t FillPrice;
    int32_t VolumeFilledToday;
    char ActivityType[2];
    int32_t ActivityTime;
    double CounterTraderOrderNumber;
    char CounterBrokerId[5];
    int32_t Token;
    CONTRACT_DESC CONTRACT_DESC;
    char OpenClose;
    char OldOpenClose;
    char BookType;
    int32_t Reserved1;
    char OldAccountNumber[10];
    char Participant[12];
    char OldParticipant[12];
    ADDITIONAL_ORDER_FLAGS ADDITIONAL_ORDER_FLAGS;
    char Reserved2;
    char Reserved3;
    char ReservedFiller2;
    char PAN[10];
    char OldPAN[10];
    int32_t AlgoID;
    int16_t Reserved4;
    int64_t LastActivityReference;
    char Reserved5[52];
};



struct ST_SPD_ELIGIBILITY {
    uint8_t Reserved : 7;
    uint8_t Eligibility : 1;
};



struct EXCH_PORTFOLIO_RESP {
    MESSAGE_HEADER MESSAGE_HEADER;
    int16_t NoOfRecords;
    char MoreRecords;
    char Filler;
    char PORTFOLIO_DATA[15][19];
};



#pragma pack(2)
struct MS_OE_RESPONSE_TR {
    int16_t TransactionCode;
    int32_t LogTime;
    int32_t UserId;
    int16_t ErrorCode;
    int64_t TimeStamp1;
    char TimeStamp2;
    char ModifiedCancelledBy;
    int16_t ReasonCode;
    int32_t TokenNo;
    CONTRACT_DESC_TR CONTRACT_DESC_TR;
    char CloseoutFlag;
    double OrderNumber;
    char AccountNumber[10];
    int16_t BookType;
    int16_t BuySellIndicator;
    int32_t DisclosedVolume;
    int32_t DisclosedVolumeRemaining;
    int32_t TotalVolumeRemaining;
    int32_t Volume;
    int32_t VolumeFilledToday;
    int32_t Price;
    int32_t GoodTillDate;
    int32_t EntryDateTime;
    int32_t LastModified;
    ST_ORDER_FLAGS ST_ORDER_FLAGS;
    int16_t BranchId;
    int32_t TraderId;
    char BrokerId[5];
    char OpenClose;
    char Settlor[12];
    int16_t ProClientIndicator;
    ADDITIONAL_ORDER_FLAGS ADDITIONAL_ORDER_FLAGS;
    int32_t Filler;
    double NnField;
    int64_t TimeStamp;
    char PAN[10];
    int32_t AlgoID;
    int16_t Reserved;
    int64_t LastActivityReference;
    char Reserved[52];
};



struct USER_ADDR_UNLOCK_APPROVE_FO {
    MESSAGE_HEADER MESSAGE_HEADER;
    int32_t UserId;
    char Reserved[36];
};



struct MS_SECURE_BOX_REGISTRATION_REQUEST_IN {
    MESSAGE_HEADER MESSAGE_HEADER;
    int16_t BoxId;
};



struct ST_ENHNCD_TICKER_INDEX_INFO {
    int32_t Token;
    int16_t MarketType;
    int32_t FillPrice;
    int32_t FillVolume;
    int64_t OpenInterest;
    int64_t DayHiOi;
    int64_t DayLoOi;
};



struct CONTRACT_DESC_TR {
    char InstrumentName[6];
    char Symbol[10];
    int32_t ExpiryDate;
    int32_t StrikePrice;
    char OptionType[2];
};



struct USER_ADDR_UNLOCK_REQ_FO {
    MESSAGE_HEADER MESSAGE_HEADER;
    int32_t Userid;
    char Reserved[70];
};



struct MS_SPD_UPDATE_INFO {
    MESSAGE_HEADER MESSAGE_HEADER;
    int32_t Token1;
    int32_t Token2;
    SEC_INFO SecInfo1;
    SEC_INFO SecInfo2;
    int32_t ReferencePrice;
    int32_t DayLowPriceDiffRange;
    int32_t DayHighPriceDiffRange;
    int32_t OpLowPriceDiffRange;
    int32_t OpHighPriceDiffRange;
    ST_SPD_ELIGIBILITY ST_SPD_ELIGIBILITY;
    char Reserved;
    char DeleteFlag;
    char Reserved;
};



struct UPDATE_LOCAL_DB_TRAILER {
    MESSAGE_HEADER MESSAGE_HEADER;
    char Reserved[2];
};



struct EXCH_PORTFOLIO_REQ {
    MESSAGE_HEADER MESSAGE_HEADER;
    int32_t LastUpdateDtTime;
};



struct SEC_INFO {
    char InstrumentName[6];
    char Symbol[10];
    char Series[2];
    int32_t ExpiryDate;
    int32_t StrikePrice;
    char OptionType[2];
    int16_t CALevel;
};



struct USER_TRD_MOD_CXL_STATUS_CHG_RESP {
    MESSAGE_HEADER MESSAGE_HEADER;
    int32_t Userid;
    char TrdModCxlBit;
    char Reserved;
};



struct MS_OE_REQUEST_TR {
    int16_t TransactionCode;
    int32_t UserID;
    int16_t ReasonCode;
    int32_t TokenNo;
    CONTRACT_DESC_TR CONTRACT_DESC_TR;
    char AccountNumber[10];
    int16_t BookType;
    int16_t BuySellIndicator;
    int32_t DisclosedVolume;
    int32_t Volume;
    int32_t Price;
    int32_t GoodTillDate;
    ST_ORDER_FLAGS ST_ORDER_FLAGS;
    int16_t BranchId;
    int32_t TraderId;
    char BrokerId[5];
    char OpenClose;
    char Settlor[12];
    int16_t ProClientIndicator;
    ADDITIONAL_ORDER_FLAGS ADDITIONAL_ORDER_FLAGS;
    int32_t Filler;
    double NnField;
    char PAN[10];
    int32_t AlgoID;
    int16_t Reserved1;
    char Reserved2[32];
};



struct MS_GR_RESPONSE {
    MESSAGE_HEADER MESSAGE_HEADER;
    int16_t BoxID;
    char BrokerID[5];
    char Filler[1];
    char IPAddress[16];
    int32_t Port;
    char SessionKey[8];
    char CryptographicKey[32];
    char CryptographicIV[16];
    char CryptographicAdditionalKey[12];
};



struct MS_ACK_RESPONSE {
    int16_t TransactionCode;
    int32_t TraderId;
    int64_t TimeStamp;
    int32_t Reference;
    int16_t ErrorCode;
    int16_t MessageLength;
};



struct COL_USER_STATUS_CHANGE_RESP {
    MESSAGE_HEADER MESSAGE_HEADER;
    int32_t Userid;
    char ColUserBit;
    char Reserved;
};



struct PARTICIPANT_STRUCTURE {
    char ParticipantId[12];
    char Reserved;
    char ParticipantName[25];
    char Reserved;
    char ParticipantStatus;
    char Reserved;
    char DeleteFlag;
    char Reserved;
    int32_t LastUpdateTime;
};



struct MS_TRADE_INQ_DATA {
    MESSAGE_HEADER MESSAGE_HEADER;
    int32_t TokenNo;
    CONTRACT_DESC CONTRACT_DESC;
    int32_t FillNumber;
    int32_t FillQuantity;
    int32_t FillPrice;
    char MktType;
    char BuyOpenClose;
    int32_t Reserved;
    char BuyBrokerId[5];
    char SellBrokerId[5];
    int32_t TraderId;
    char RequestedBy;
    char SellOpenClose;
    char BuyAccountNumber[10];
    char SellAccountNumber[10];
    char Reserved[24];
    char ReservedFiller[2];
    char Reserved[2];
    char BuyPAN[10];
    char SellPAN[10];
    char Reserved[60];
};



struct SIGNOFF_OUT {
    MESSAGE_HEADER MESSAGE_HEADER;
    int32_t UserId;
    char Reserved[145];
};



struct BCAST_INDEX_MAP_DETAILS {
    char BcastName[26];
    char ChangedName[10];
    char DeleteFlag;
    int32_t LastUpdateDateTime;
};



struct MS_DOWNLOAD_INDEX_MAP {
    MESSAGE_HEADER MESSAGE_HEADER;
    int16_t NoOfRecords;
    BCAST_INDEX_MAP_DETAILS BCAST_INDEX_MAP_DETAILS[10];
};



struct MS_MESSAGE_DOWNLOAD {
    MESSAGE_HEADER MESSAGE_HEADER;
    double SequenceNumber;
};



struct PRICE_MOD {
    MESSAGE_HEADER MESSAGE_HEADER;
    int32_t TokenNo;
    int32_t TraderID;
    double OrderNumber;
    int16_t BuySell;
    int32_t Price;
    int32_t Volume;
    int32_t LastModified;
    char Reference[4];
    int64_t LastActivityReference;
    char Reserved[24];
};



struct SECURITY_FILE_HEADER {
    char NEATCM[6];
    char Reserved;
    char VersionNumber[7];
    char Reserved;
    int32_t CreationTime;
};



struct USER_TRD_MOD_CXL_STATUS_CHG_REQ {
    MESSAGE_HEADER MESSAGE_HEADER;
    int32_t Userid;
    char TrdModCxlBit;
    char Reserved[7];
};



struct STOCK_STRUCTURE {
    int32_t Token;
    char Reserved1;
    int32_t AssetToken;
    char Reserved2;
    char InstrumentName[6];
    char Reserved3;
    char Symbol[10];
    char Reserved4;
    char Series[2];
    char Reserved5[2];
    int32_t ExpiryDate;
    char Reserved6;
    int32_t StrikePrice;
    char Reserved7;
    char OptionType[2];
    char Reserved8;
    char Category;
    char Reserved9;
    int16_t CALevel;
    char Reserved10;
    char ReservedIdentifier;
    char Reserved11;
    int16_t PermittedToTrade;
    char Reserved12;
    int16_t IssueRate;
    char Reserved13;
    char ST_SEC_ELIGIBILITY_PER_MARKET[6];
    int32_t IssueStartDate;
    char Reserved14;
    int32_t InterestPaymentDate;
    char Reserved15;
    int32_t IssueMaturityDate;
    char Reserved16;
    int32_t MarginPercentage;
    char Reserved17;
    int32_t MinimumLotQuantity;
    char Reserved18;
    int32_t BoardLotQuantity;
    char Reserved19;
    int32_t TickSize;
    char Reserved20;
    double IssuedCapital;
    char Reserved21;
    int32_t FreezeQuantity;
    char Reserved22;
    int32_t WarningQuantity;
    char Reserved23;
    int32_t ListingDate;
    char Reserved24;
    int32_t ExpulsionDate;
    char Reserved25;
    int32_t ReadmissionDate;
    char Reserved26;
    int32_t RecordDate;
    char Reserved27;
    int32_t NoDeliveryStartDate;
    char Reserved28;
    int32_t NoDeliveryEndDate;
    char Reserved29;
    int32_t LowPriceRange;
    char Reserved30;
    int32_t HighPriceRange;
    char Reserved31;
    int32_t ExDate;
    char Reserved32;
    int32_t BookClosureStartDate;
    char Reserved33;
    int32_t BookClosureEndDate;
    char Reserved34;
    int32_t LocalLDBUpdateDateTime;
    char Reserved35;
    int32_t ExerciseStartDate;
    char Reserved36;
    int32_t ExerciseEndDate;
    char Reserved37;
    int16_t TickerSelection;
    char Reserved38;
    int32_t OldTokenNumber;
    char Reserved39;
    char CreditRating[12];
    char Reserved40;
    char Name[25];
    char Reserved41;
    char EGMAGM;
    char Reserved42;
    char InterestDividend;
    char Reserved43;
    char RightsBonus;
    char Reserved44;
    char MFAON;
    char Reserved45;
    char Remarks[24];
    char Reserved46;
    char ExStyle;
    char Reserved47;
    char ExAllowed;
    char Reserved48;
    char ExRejectionAllowed;
    char Reserved49;
    char PIAllowed;
    char Reserved50;
    char SettlementIndicator;
    char Reserved51;
    char IsCorporateAdjusted;
    char Reserved52;
    char SymbolForAsset[10];
    char Reserved53;
    char InstrumentOfAsset[6];
    char Reserved54;
    int32_t BasePrice;
    char Reserved55;
    char DeleteFlag;
};



struct ST_SEC_ELIGIBILITY_PER_MARKET {
    int16_t SecurityStatus;
    char Reserved;
    char Eligibility;
    char Reserved;
};



struct MS_OE_REQUEST {
    MESSAGE_HEADER MESSAGE_HEADER;
    char ParticipantType;
    char Reserved;
    int16_t CompetitorPeriod;
    int16_t SolicitorPeriod;
    char ModifiedCancelledBy;
    char Reserved2;
    int16_t ReasonCode;
    char Reserved3[4];
    int32_t TokenNo;
    CONTRACT_DESC CONTRACT_DESC;
    char CounterPartyBrokerId[5];
    char Reserved4;
    char Reserved5[2];
    char CloseoutFlag;
    char Reserved6;
    int16_t OrderType;
    double OrderNumber;
    char AccountNumber[10];
    int16_t BookType;
    int16_t BuySellIndicator;
    int32_t DisclosedVolume;
    int32_t DisclosedVolumeRemaining;
    int32_t TotalVolumeRemaining;
    int32_t Volume;
    int32_t VolumeFilledToday;
    int32_t Price;
    int32_t TriggerPrice;
    int32_t GoodTillDate;
    int32_t EntryDateTime;
    int32_t MinimumFillAONVolume;
    int32_t LastModified;
    ST_ORDER_FLAGS ST_ORDER_FLAGS;
    int16_t BranchId;
    int32_t TraderId;
    char BrokerId[5];
    char cOrdFiller[24];
    char OpenClose;
    char Settlor[12];
    int16_t ProClientIndicator;
    int16_t SettlementPeriod;
    ADDITIONAL_ORDER_FLAGS ADDITIONAL_ORDER_FLAGS;
    char Reserved7;
    char Filler17;
    char Filler18;
    double NnField;
    int64_t MktReplay;
    char PAN[10];
    int32_t AlgoID;
    int16_t Reserved8;
    int64_t LastActivityReference;
    char Reserved9[52];
};



struct MS_SPD_OE_REQUEST {
    MESSAGE_HEADER MESSAGE_HEADER;
    char ParticipantType1;
    char Filler1;
    int16_t CompetitorPeriod1;
    int16_t SolicitorPeriod1;
    char ModCxBy1;
    char Filler9;
    int16_t ReasonCode1;
    char StartAlpha1[2];
    char EndAlpha1[2];
    int32_t Token1;
    CONTRACT_DESC CONTRACT_DESC;
    char OpBrokerId1[5];
    char Fillerx1;
    char FillerOptions1[3];
    char Filler1_2;
    int16_t OrderType1;
    double OrderNumber1;
    char AccountNumber1[10];
    int16_t BookType1;
    int16_t BuySell1;
    int32_t DisclosedVol1;
    int32_t DisclosedVolRemaining1;
    int32_t TotalVolRemaining1;
    int32_t Volume1;
    int32_t VolumeFilledToday1;
    int32_t Price1;
    int32_t TriggerPrice1;
    int32_t GoodTillDate1;
    int32_t EntryDateTime1;
    int32_t MinFillAon1;
    int32_t LastModified1;
    ST_ORDER_FLAGS ST_ORDER_FLAGS;
    int16_t BranchId1;
    int32_t TraderId1;
    char BrokerId1[5];
    char cOrdFiller[24];
    char OpenClose1;
    char Settlor1[12];
    int16_t ProClient1;
    int16_t SettlementPeriod1;
    ADDITIONAL_ORDER_FLAGS ADDITIONAL_ORDER_FLAGS;
    char Reserved;
    char Filler17;
    char Filler18;
    double NnField;
    int64_t MktReplay;
    char PAN[10];
    int32_t AlgoID;
    int16_t Reserved_2;
    int64_t LastActivityReference;
    char Reserved_3[52];
    int32_t PriceDiff;
    MS_SPD_LEG_INFO MS_SPD_LEG_INFO_leg2;
    MS_SPD_LEG_INFO MS_SPD_LEG_INFO_leg3;
};



struct MS_SPD_LEG_INFO {
    int32_t Token2;
    CONTRACT_DESC CONTRACT_DESC;
    char OpBrokerId2[5];
    char Fillerx2[1];
    int16_t OrderType2;
    int16_t BuySell2;
    int32_t DisclosedVol2;
    int32_t DisclosedVolRemaining2;
    int32_t TotalVolRemaining2;
    int32_t Volume2;
    int32_t VolumeFilledToday2;
    int32_t Price2;
    int32_t TriggerPrice2;
    int32_t MinFillAon2;
    ST_ORDER_FLAGS ST_ORDER_FLAGS;
    char OpenClose2[1];
    ADDITIONAL_ORDER_FLAGS ADDITIONAL_ORDER_FLAGS;
    char Reserved[1];
    char FillerY[1];
};



struct CONTRACT_DESC {
    char InstrumentName[6];
    char Symbol[10];
    int32_t ExpiryDate;
    int32_t StrikePrice;
    char OptionType[2];
    int16_t CALevel;
};



struct SECURITY_STRUCTURE {
    int32_t Token;
    char Reserved;
    char Symbol[10];
    char Reserved;
    char Series[2];
    char Reserved;
    int16_t InstrumentType;
    char Reserved;
    double IssuedCapital;
    char Reserved;
    int16_t PermittedToTrade;
    char Reserved;
    char CreditRating[17];
    char Reserved;
    // ST_SEC_ELIGIBILITY_PER_MARKET [6] - struct type not defined
    int32_t BoardLotQty;
    char Reserved;
    int32_t TickSize;
    char Reserved;
    char Name[25];
    char Reserved;
    int16_t IssueRate;
    char Reserved;
    int32_t IssueStartDate;
    char Reserved;
    int32_t IssuePDate;
    char Reserved;
    int32_t IssueMaturityDate;
    char Reserved;
    int16_t FreezePercent;
    char Reserved;
    int32_t ListingDate;
    char Reserved;
    int32_t ExpulsionDate;
    char Reserved;
    int32_t ReAdmissionDate;
    char Reserved;
    int32_t ExDate;
    char Reserved;
    int32_t RecordDate;
    char Reserved;
    int32_t NoDeliveryStartDate;
    char Reserved;
    int32_t NoDeliveryEndDate;
    char Reserved;
    char ParticipateIndex;
    char Reserved;
    char AON;
    char Reserved;
    char MinFill;
    char Reserved;
    int16_t WarningPercent;
    char Reserved;
    int32_t BookClosureStartDate;
    char Reserved;
    int32_t BookClosureEndDate;
    char Reserved;
    char Dividend;
    char Reserved;
    char Rights;
    char Reserved;
    char Bonus;
    char Reserved;
    char Interest;
    char Reserved;
    char AGM;
    char Reserved;
    char EGM;
    char Reserved;
    char Remark[25];
    char Reserved;
    int32_t LocalDBUpdateDateTime;
    char Reserved;
    char DeleteFlag;
    char Reserved;
    int32_t FaceValue;
    char Reserved;
    char ISIN[12];
};



struct CONTRACT_FILE_HEADER {
    char NEATFO[6];
    char Reserved;
    char VersionNumber[5];
    char Reserved;
};



struct MS_BOX_SIGN_OFF {
    MESSAGE_HEADER MESSAGE_HEADER;
    int16_t BoxId;
};



struct ST_MARKET_WATCH_BCAST {
    int32_t Token;
    ST_MKT_WISE_INFO ST_MKT_WISE_INFO[3];
    uint32_t OpenInterest;
};



struct TotalOrderVolume {
    double Buy;
    double Sell;
};



struct ST_SEC_STATUS_PER_MARKET {
    int16_t Status;
};



struct DEALER_ORD_LMT {
    MESSAGE_HEADER MESSAGE_HEADER;
    char BrokerId[5];
    int32_t UserId;
    double OrdQtyBuff;
    double OrdValBuff;
};



struct INDEX_DATA {
    char SectorName[15];
    int32_t IndexValue;
};



struct MS_SIGNON {
    MESSAGE_HEADER MESSAGE_HEADER;
    int32_t UserID;
    char Reserved[8];
    char Password[8];
    char Reserved[8];
    char NewPassword[8];
    char TraderName[26];
    int32_t LastPasswordChangeDate;
    char BrokerID[5];
    char Reserved[1];
    int16_t BranchID;
    int32_t VersionNumber;
    int32_t Batch2StartTime;
    char HostSwitchContext[1];
    char Colour[50];
    char Reserved[1];
    int16_t UserType;
    double SequenceNumber;
    char WsClassName[14];
    char BrokerStatus[1];
    char ShowIndex[1];
    ST_BROKER_ELIGIBILITY_PER_MKT ST_BROKER_ELIGIBILITY_PER_MKT;
    int16_t MemberType;
    char ClearingStatus[1];
    char BrokerName[25];
    char Reserved[16];
    char Reserved[16];
    char Reserved[16];
};



struct MS_BCAST_CONT_MESSAGE {
    MESSAGE_HEADER MESSAGE_HEADER;
    int16_t StreamNumber;
    int16_t Status;
    char Reserved[200];
};



struct MS_RP_TRAILER {
    MESSAGE_HEADER MESSAGE_HEADER;
    char MessageType;
    int32_t NumberOfPackets;
    char Reserved;
};



struct MS_SIGNON {
    MESSAGE_HEADER MESSAGE_HEADER;
    int32_t UserID;
    char Reserved[8];
    char Password[8];
    char Reserved[8];
    char NewPassword[8];
    char TraderName[26];
    int32_t LastPasswordChangeDate;
    char BrokerID[5];
    char Reserved[1];
    int16_t BranchID;
    int32_t VersionNumber;
    int32_t EndTime;
    char Reserved[1];
    char Colour[50];
    char Reserved[1];
    int16_t UserType;
    double SequenceNumber;
    char Reserved[14];
    char BrokerStatus[1];
    char ShowIndex[1];
    ST_BROKER_ELIGIBILITY_PER_MKT ST_BROKER_ELIGIBILITY_PER_MKT;
    int16_t MemberType;
    char ClearingStatus[1];
    char BrokerName[25];
    char Reserved[16];
    char Reserved[16];
    char Reserved[16];
};



struct SPD_ORD_LMT {
    MESSAGE_HEADER MESSAGE_HEADER;
    char BrokerId[5];
    int32_t UserId;
    double SpdOrdQtyBuff;
    double SpdOrdValBuff;
};



struct MS_BROADCAST_LIMIT_EXCEEDED {
    BCAST_HEADER BCAST_HEADER;
    char BrokerCode[5];
    char CounterBrokerCode[5];
    int16_t WarningType;
    int32_t Token;
    char InstrumentName[6];
    char Symbol[10];
    int32_t ExpiryDate;
    int32_t StrikePrice;
    char OptionType[2];
    int16_t CALevel;
    int32_t TradeNumber;
    int32_t TradePrice;
    int32_t TradeVolume;
    char Final[1];
    char Filler[1];
};



struct MbpSells {
    int16_t NoOrders;
    int32_t Volume;
    int32_t Price;
};



struct MS_BCAST_INQ_RESP_2 {
    BCAST_HEADER BCAST_HEADER;
    int16_t NoOfRecords;
    ST_MARKET_WATCH_BCAST ST_MARKET_WATCH_BCAST[5];
};



struct MS_SPD_MKT_INFO {
    BCAST_HEADER BCAST_HEADER;
    int32_t Token1;
    int32_t Token2;
    int16_t MbpBuy;
    int16_t MbpSell;
    int32_t LastActiveTime;
    uint32_t TradedVolume;
    double TotalTradedValue;
    MbpBuys MbpBuys[5];
    MbpSells MbpSells[5];
    TotalOrderVolume TotalOrderVolume;
    int32_t OpenPriceDifference;
    int32_t DayHighPriceDifference;
    int32_t DayLowPriceDifference;
    int32_t LastTradedPriceDifference;
    int32_t LastUpdateTime;
};



struct INTERACTIVE_ONLY_MBP_DATA {
    int32_t Token;
    int16_t BookType;
    int16_t TradingStatus;
    uint32_t VolumeTradedToday;
    int32_t LastTradedPrice;
    char NetChangeIndicator;
    int32_t NetPriceChangeFromClosingPrice;
    int32_t LastTradeQuantity;
    int32_t LastTradeTime;
    int32_t AverageTradePrice;
    int16_t AuctionNumber;
    int16_t AuctionStatus;
    int16_t InitiatorType;
    int32_t InitiatorPrice;
    int32_t InitiatorQuantity;
    int32_t AuctionPrice;
    int32_t AuctionQuantity;
    char RecordBuffer[55];
    int16_t BbTotalBuyFlag;
    int16_t BbTotalSellFlag;
    double TotalBuyQuantity;
    double TotalSellQuantity;
    char ST_INDICATOR[2];
    int32_t ClosingPrice;
    int32_t OpenPrice;
    int32_t HighPrice;
    int32_t LowPrice;
};



struct ST_BROKER_ELIGIBILITY_PER_MKT {
    uint8_t Reserved : 4;
    uint8_t AuctionMarket : 1;
    uint8_t SpotMarket : 1;
    uint8_t OddlotMarket : 1;
    uint8_t NormalMarket : 1;
    uint8_t Reserved2 : 8;
};



struct RP_SPD_MKT_STATS {
    MESSAGE_HEADER MESSAGE_HEADER;
    char MessageType;
    char Reserved;
    int16_t NoOfRecords;
    SPD_STATS_DATA SPD_STATS_DATA[3];
};



struct MS_BCAST_MESSAGE {
    BCAST_HEADER BCAST_HEADER;
    int16_t BranchNumber;
    char BrokerNumber[5];
    char ActionCode[3];
    ST_BCAST_DESTINATION ST_BCAST_DESTINATION;
    char Reserved[26];
    int16_t BroadcastMessageLength;
    char BroadcastMessage[239];
};



struct MS_TRADER_INT_MSG {
    MESSAGE_HEADER MESSAGE_HEADER;
    int32_t TraderId;
    char Reserved[3];
    char Reserved[1];
    int16_t BroadCastMessageLength;
    char BroadCastMessage[239];
};



struct MS_ERROR_RESPONSE {
    MESSAGE_HEADER MESSAGE_HEADER;
    char Key[14];
    char ErrorMessage[128];
};



struct RP_HDR {
    MESSAGE_HEADER MESSAGE_HEADER;
    char MessageType;
    char org_scope;
    int32_t report_date;
    int16_t user_type;
    char broker_number[5];
    char broker_name[25];
    int32_t trader_number;
    char trader_name[26];
};



struct MBP_INFORMATION {
    int32_t Quantity;
    int32_t Price;
    int16_t NumberOfOrders;
    int16_t BbBuySellFlag;
};



struct MbpBuys {
    int16_t NoOrders;
    int32_t Volume;
    int32_t Price;
};



struct INDEX_DETAILS {
    int32_t Token;
    char Name[50];
    int32_t Open;
    int32_t High;
    int32_t Low;
    int32_t Last;
    int32_t Close;
    int32_t PrevClose;
    int32_t LifeHigh;
    int32_t LifeLow;
    int32_t filler1;
    int32_t filler2;
    int32_t filler3;
};



struct MS_SEC_OPEN_MSGS {
    MESSAGE_HEADER MESSAGE_HEADER;
    char Symbol[10];
    char Series[2];
    int32_t Token;
    int32_t OpeningPrice;
    uint32_t Reserved;
};



struct INDUSTRY_INDEX {
    char IndustryName[15];
    int32_t Opening;
    int32_t High;
    int32_t Low;
    int32_t Closing;
    int32_t Start;
};



struct MS_RP_HDR {
    MESSAGE_HEADER MESSAGE_HEADER;
    char MessageType;
    int32_t ReportDate;
    int16_t UserType;
    char BrokerId[5];
    char FirmName[25];
    int32_t TraderNumber;
    char TraderName[26];
};



struct MS_RP_MARKET_STATS {
    MESSAGE_HEADER MESSAGE_HEADER;
    char MessageType;
    char Reserved;
    int16_t NumberOfRecords;
    MKT_STATS_DATA MKT_STATS_DATA[6];
};



struct SECT_IDX_RPT_DATA {
    MESSAGE_HEADER MESSAGE_HEADER;
    char MessageType;
    char IndustryName[15];
    int16_t NumberOfIndustryRecords;
    INDEX_DATA INDEX_DATA[10];
};



struct MESSAGE_HEADER {
    int16_t TransactionCode;
    int32_t LogTime;
    char AlphaChar[2];
    int32_t TraderId;
    int16_t ErrorCode;
    int64_t Timestamp;
    char TimeStamp1[8];
    char TimeStamp2[8];
    int16_t MessageLength;
};



struct ST_MKT_WISE_INFO {
    ST_INDICATOR ST_INDICATOR;
    int32_t BuyVolume;
    int32_t BuyPrice;
    int32_t SellVolume;
    int32_t SellPrice;
    int32_t LastTradePrice;
    int32_t LastTradeTime;
};



struct MS_GLOBAL_INDICES {
    MESSAGE_HEADER MESSAGE_HEADER;
    INDEX_DETAILS INDEX_DETAILS;
};



struct MS_BCAST_INDICES {
    BCAST_HEADER BCAST_HEADER;
    int16_t NumberOfRecords;
    MS_INDICES MS_INDICES[6];
};



struct MS_GLOBAL_CONTRACTS {
    MESSAGE_HEADER MESSAGE_HEADER;
    CONTRACT_DETAILS CONTRACT_DETAILS;
};



struct CTRL_MSG_TO_TRADER {
    MESSAGE_HEADER MESSAGE_HEADER;
    int32_t TraderId;
    char ActionCode[3];
    char Reserved[1];
    int16_t BroadCastMessageLength;
    char BroadCastMessage[239];
};



struct BCAST_HEADER {
    char Reserved[2];
    int32_t LogTime;
    char AlphaChar[2];
    int16_t TransactionCode;
    int16_t ErrorCode;
    int32_t BCSeqNo;
    char Reserved[1];
    char Reserved[3];
    char TimeStamp2[8];
    char Filler2[8];
    int16_t MessageLength;
};



struct IND_IDX_RPT_DATA {
    MESSAGE_HEADER MESSAGE_HEADER;
    char MessageType;
    char Reserved;
    int16_t NumberOfIndustryRecords;
    INDUSTRY_INDEX INDUSTRY_INDEX[10];
};



struct MS_BCAST_ONLY_MBP {
    BCAST_HEADER BCAST_HEADER;
    int16_t NoOfRecords;
    INTERACTIVE_ONLY_MBP_DATA INTERACTIVE_ONLY_MBP_DATA[2];
};



struct ST_MBO_MBP_TERMS {
    uint8_t Reserved : 6;
    uint8_t AON : 1;
    uint8_t MF : 1;
    char Reserved;
};



struct INNER_MESSAGE_HEADER {
    int32_t TraderId;
    int32_t LogTime;
    char AlphaChar[2];
    int16_t TransactionCode;
    int16_t ErrorCode;
    int64_t Timestamp;
};



struct MKT_INDEX {
    int16_t Opening;
    int16_t High;
    int16_t Low;
    int16_t Closing;
    int16_t Start;
};



struct ST_BCAST_DESTINATION {
    uint8_t Reserved : 4;
    uint8_t JournalingRequired : 1;
    uint8_t Tandem : 1;
    uint8_t ControlWorkstation : 1;
    uint8_t TraderWorkstation : 1;
    char Reserved2;
};



struct CONTRACTS_DETAILS {
    int32_t Token;
    char NseSymbol[16];
    char InstrumentName[6];
    int16_t ExpDay;
    int16_t ExpMonth;
    int16_t ExpYear;
    char OptionType[2];
    int32_t StrikePrice;
    int32_t BidPrice;
    int32_t AskPrice;
    double BidSize;
    double AskSize;
    int32_t Open;
    int32_t High;
    int32_t Low;
    int32_t Last;
    int32_t Close;
    int32_t PrevClose;
    int32_t LimitHigh;
    int32_t LimitLow;
    double TotalTrades;
    double OpenInterest;
    int32_t filler1;
    int32_t filler2;
    int32_t filler3;
};



struct MS_INDICES {
    char IndexName[21];
    int32_t IndexValue;
    int32_t HighIndexValue;
    int32_t LowIndexValue;
    int32_t OpeningIndex;
    int32_t ClosingIndex;
    int32_t PercentChange;
    int32_t YearlyHigh;
    int32_t YearlyLow;
    int32_t NoOfUpmoves;
    int32_t NoOfDownmoves;
    double MarketCapitalisation;
    char NetChangeIndicator;
    char Reserved;
};
